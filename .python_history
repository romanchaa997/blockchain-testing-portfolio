import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Пример простого контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(abi=contract_interface['abi'], bytecode=contract_interface['bin'])
    tx
pip install pytest
pip install py-solc-x
pip install pytest
pip install py-solc-x
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    ).constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
exit()  # Выйти из Python
import solcx
solcx.install_solc("0.8.0")  # Устанавливаем нужную версию
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    ).constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    ).constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    ).constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = SimpleStorage.constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
exit()
from web3 import Web3
infura_url = "https://sepolia.infura.io/v3/YOUR_INFURA_API_KEY"  # замени на свой API-ключ
w3 = Web3(Web3.HTTPProvider(infura_url))
print("Connected:", w3.is_connected())
from web3 import Web3
avax_rpc = "https://api.avax-test.network/ext/bc/C/rpc"
w3 = Web3(Web3.HTTPProvider(avax_rpc))
print("Connected:", w3.is_connected())
from web3 import Web3
w3 = Web3(Web3.HTTPProvider("https://api.avax-test.network/ext/bc/C/rpc"))
print("Connected:", w3.is_connected())
print("Chain ID:", w3.eth.chain_id)
print("Block Number:", w3.eth.block_number)
address = "0xТвойАдрес"
balance = w3.eth.get_balance(address)
print("Balance:", w3.from_wei(balance, 'ether'), "AVAX")
from web3 import Web3
w3 = Web3(Web3.HTTPProvider("https://api.avax-test.network/ext/bc/C/rpc"))
print("Connected:", w3.is_connected())
print("Chain ID:", w3.eth.chain_id)
print("Block Number:", w3.eth.block_number)
address = "0x406A3e99b5bcD74E5FB8F0aB283A256784Ee0733"
balance = w3.eth.get_balance(address)
print("Balance:", w3.from_wei(balance, 'ether'), "AVAX")
quit ()
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта (SimpleStorage.sol)
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = SimpleStorage.constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
# Исходный код контракта SimpleStorage.sol
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = SimpleStorage.constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
pytest test_contract.py -v
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'], 
        bytecode=contract_interface['bin']
    )
    tx_hash = SimpleStorage.constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
C:\Users\Aleksandr\test_contract.py 
C:\Users\Aleksandr\pytest test_contract.py -v
exit()
from solcx import install_solc
install_solc('0.8.0')
pytest test_contract.py -v
exit()
-c "from solcx import install_solc; install_solc('0.8.0')"
python -c "from solcx import install_solc; install_solc('0.8.0')"
from solcx import install_solc
install_solc('0.8.0')
import pytest
from web3 import Web3
from web3.providers.eth_tester import EthereumTesterProvider
from solcx import compile_source, install_solc
# Устанавливаем компилятор Solidity версии 0.8.0
install_solc('0.8.0')
# Исходный код контракта SimpleStorage.sol
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
@pytest.fixture
def w3():
        """Создаём локальный Web3 провайдер на базе eth-tester"""
            return Web3(EthereumTesterProvider())
            
@pytest.fixture
def contract(w3):
            """Компилируем и разворачиваем контракт"""
                compiled_sol = compile_source(contract_source)
                    contract_interface = compiled_sol['<stdin>:SimpleStorage']
                    
    SimpleStorage = w3.eth.contract(
        abi=contract_interface['abi'],
        bytecode=contract_interface['bin']
    )
    tx_hash = SimpleStorage.constructor().transact()
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return w3.eth.contract(
        address=tx_receipt.contractAddress,
        abi=contract_interface['abi']
    )
exit()
from solcx import install_solc, set_solc_version
install_solc('0.8.0')
set_solc_version('0.8.0')
exit()
compiled_sol = compile_source(contract_source, solc_version="0.8.0")
compiled_sol = compile_source(contract_source, solc_version="0.8.0")
from solcx import compile_source, install_solc, set_solc_version
install_solc('0.8.0')
set_solc_version('0.8.0')
compiled_sol = compile_source(contract_source, solc_version="0.8.0")
from solcx import compile_source, install_solc, set_solc_version
# Устанавливаем и задаем компилятор Solidity версии 0.8.0
install_solc('0.8.0')
set_solc_version('0.8.0')
# Определяем исходный код контракта
contract_source = """
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 _data) public {
            storedData = _data;
                }
                
    function get() public view returns (uint256) {
            return storedData;
                }
                }
                """
# Компилируем контракт
compiled_sol = compile_source(contract_source, solc_version="0.8.0")
print(compiled_sol)
pytest test_contract.py -v
exit()
